"""
tasks类：
记录养老院中的任务类型，以及对应需要的技能集合，并记录各个任务的优先级
     任务类型（简要说明）     required skill               机器人类型  优先级    事件的响应机制               服务时长
1    紧急事件              ②③④⑤ [0, 1, 1, 1, 1, 0]     2,3,4,5     1     直接前往目标点               5min-10min
2    去卫生间（快速运输任务） ②⑥    [0, 1, 0, 0, 0, 1]        2        2     先去接老人，再去目标点, 再返回   5-10min
3    送餐                 ③      [0, 0, 1, 0, 0, 0]      3,5       3     先去目标点，再去任务请求点       2-5min（目标点人放置物品）
4    情感陪伴              ④      [0, 0, 0, 1, 0, 0]       4       3      只前往任务请求点               20-30min
5    移动辅助任务           ②      [0, 0, 0, 0, 0, 1]      1,2      3      先去接老人，再去目标点          1-3min（老人上车耗时）
6    私人物品配送           ③⑤    [0, 0, 1, 0, 1, 0]       5       4      先去目标点，再去任务请求点       2-5min（目标点人放置物品）
7    康复训练              ①⑥    [1, 0, 0, 0, 0, 1]       1       4      先去接老人，再去目标点，再返回    20-30min
机器人类型：                  机器人能力集合：         机器人的数量：
类型 1：辅助行走机器人     [1, 0, 0, 0, 0, 1]        4
类型 2：智能轮椅机器人     [0, 1, 0, 0, 0, 1]        4
类型 3：开放式递送机器人    [0, 0, 1, 0, 0, 0]       2
类型 4：情感陪护机器人     [0, 0, 0, 1, 0, 0]        3
类型 5：箱式递送机器人     [0, 0, 1, 0, 1, 0]        2
机器人能力：① 康复训练能力 ② 辅助老人移动能力(快速) ③ 物品派送能力 ④ 陪伴能力 ⑤ 物品的抓取能力 ⑥ 辅助老人移动能力
"""


class Tasks:

    def __init__(self):
        # 任务类型以及任务优先级说明
        self.task_info = ["1紧急事件", "2去卫生间（快速运输任务）",  "3送餐", "4情感陪护", "5移动辅助任务", "6私人物品配送", "7康复训练"]
        self.required_skills = [
            [0, 0, 0, 1, 0, 0],    # 0 紧急事件 [0, 1, 1, 1, 0, 0] 暂时不添加这种情况
            [0, 1, 0, 0, 0, 1],    # 1 去卫生间
            [0, 0, 1, 0, 0, 0],    # 2 送餐
            [0, 0, 0, 1, 0, 0],    # 3 情感陪护
            [0, 0, 0, 0, 0, 1],    # 4 移动辅助任务
            [0, 0, 1, 0, 1, 0],    # 5 私人物品配送
            [1, 0, 0, 0, 0, 1]     # 6 康复训练
        ]
        self.task_priority = [1, 2, 3, 3, 3, 4, 4]

    # 函数功能：获取当前时刻的任务请求列表，确定尚未进行分配的任务，获取任务类型，返回各个任务请求点所需的技能列表。
    def get_tasks_required_skill_list(self, task_window):
        tasks_required_skill_list = [[0]*6 for i in range(len(task_window))]
        # 获取每一个位置的任务请求类型，并获得其对应任务需要的技能集
        for i in range(len(task_window)):
            if sum(task_window[i]) == 0:
                continue
            task_id = task_window[i][3]
            tasks_required_skill_list[i] = self.required_skills[task_id]
        return tasks_required_skill_list
